package simulations.divorce

import io.gatling.core.Predef._
import io.gatling.http.Predef._

import com.typesafe.config._

object PetitionerRespondent {

    val conf = ConfigFactory.load()
    val baseurl: String = System.getenv("E2E_FRONTEND_URL")
    val continuePause = conf.getInt("continuePause")


    val confidentialPetitionerDetails = exec(http("/petitioner-respondent/confidential")
        .post("/petitioner-respondent/confidential")
        .formParam("petitionerContactDetailsConfidential", "share")
        .check(status.is(200))
        .check(currentLocation.is(baseurl + "/petitioner-respondent/names")))
        .pause(continuePause)

    val names = exec(http("/petitioner-respondent/names")
        .post("/petitioner-respondent/names")
        .formParam("petitionerFirstName", "Petitioner")
        .formParam("petitionerLastName", "Name")
        .formParam("respondentFirstName", "Respondent")
        .formParam("respondentLastName", "Name")
        .check(status.is(200))
        .check(currentLocation.is(baseurl + "/petitioner-respondent/names-on-certificate")))
        .pause(continuePause)

    val namesOnMarriageCertificate = exec(http("/petitioner-respondent/names-on-certificate")
        .post("/petitioner-respondent/names-on-certificate")
        .formParam("marriagePetitionerName", "Petitioner Marriage Name")
        .formParam("marriageRespondentName", "Respondent Marriage Name")
        .check(status.is(200))
        .check(currentLocation.is(baseurl + "/petitioner-respondent/changed-name")))
        .pause(continuePause)

    val namesChangedFromMarriageCertificate = exec(http("/petitioner-respondent/changed-name")
        .post("/petitioner-respondent/changed-name")
        .formParam("petitionerNameDifferentToMarriageCertificate", "Yes")
        .formParam("petitionerNameChangedHow[]", "other")
        .formParam("petitionerNameChangedHowOtherDetails", "Another way")
        .check(status.is(200))
        .check(currentLocation.is(baseurl + "/petitioner-respondent/contact-details")))
        .pause(continuePause)

    val petitionerContactDetails = exec(http("/petitioner-respondent/contact-details")
        .post("/petitioner-respondent/contact-details")
        .formParam("petitionerEmail", "petitioner.name@example.com")
        .formParam("petitionerPhoneNumber", "01234567890")
        .formParam("petitionerConsent", "Yes")
        .check(status.is(200))
        .check(currentLocation.is(baseurl + "/petitioner-respondent/address")))
        .pause(continuePause)

    val petitionerAddress = exec(http("/petitioner-respondent/address")
        .post("/petitioner-respondent/address")
        .formParam("postcode", "sw1p 3bt")
        .formParam("addressType", "postcode")
        .formParam("searchPostcode", "true")
        .formParam("addressConfirmed", "false")
        .check(status.is(200)))
        .pause(continuePause)
        .exec(http("/petitioner-respondent/address")
            .post("/petitioner-respondent/address")
            .formParam("selectAddressIndex", "1")
            .formParam("addressType", "postcode")
            .formParam("selectAddress", "true")
            .formParam("addressConfirmed", "false")
            .formParam("postcode", "sw1p 3bt")
            .check(status.is(200)))
        .pause(continuePause)
        .exec(http("/petitioner-respondent/address")
            .post("/petitioner-respondent/address")
            .formParam("addressLine0", "The Royal Anniversary Trust")
            .formParam("addressLine1", "Sanctuary Buildings")
            .formParam("addressLine2", "Great Smith Street")
            .formParam("addressLine3", "London")
            .formParam("addressLine4", "SW1P 3BT")
            .formParam("addressType", "postcode")
            .formParam("addressConfirmed", "true")
            .formParam("postcode", "sw1p 3bt")
            .check(status.is(200))
            .check(currentLocation.is(baseurl + "/petitioner-respondent/petitioner-correspondence/use-home-address")))
        .pause(continuePause)

    val petitionerCorrespondenceAddress = exec(http("/petitioner-respondent/petitioner-correspondence/use-home-address")
        .post("/petitioner-respondent/petitioner-correspondence/use-home-address")
        .formParam("petitionerCorrespondenceUseHomeAddress", "Yes")
        .check(status.is(200))
        .check(currentLocation.is(baseurl + "/petitioner-respondent/live-together")))
        .pause(continuePause)

    val liveTogether = exec(http("/petitioner-respondent/live-together")
        .post("/petitioner-respondent/live-together")
        .formParam("livingArrangementsLiveTogether", "Yes")
        .check(status.is(200))
        .check(currentLocation.is(baseurl + "/petitioner-respondent/respondent-correspondence/use-home-address")))
        .pause(continuePause)

    val respondentCorrespondenceToHomeAddress = exec(http("/petitioner-respondent/respondent-correspondence/use-home-address")
        .post("/petitioner-respondent/respondent-correspondence/use-home-address")
        .formParam("respondentCorrespondenceUseHomeAddress", "Yes")
        .check(status.is(200))
        .check(currentLocation.is(baseurl + "/about-divorce/reason-for-divorce/reason")))
        .pause(continuePause)

    val addMarriageCertificate = exec(http("add marriage certificate")
        .post("/petitioner-respondent/marriage-certificate-upload")
        .bodyPart(RawFileBodyPart("file", "marriage_certificate.jpg")
            .fileName("marriage_certificate.jpg")
            .transferEncoding("binary")).asMultipartForm
        .check(status.is(200))
        .check(currentLocation.is(baseurl + "/petitioner-respondent/marriage-certificate-upload")))
        .pause(continuePause)

    val completeMarriageCertificate = exec(http("/petitioner-respondent/marriage-certificate-upload")
        .post("/petitioner-respondent/marriage-certificate-upload")
        .formParam("submit", "Continue")
        .check(status.is(200))
        .check(currentLocation.is(baseurl + "/check-your-answers")))
        .pause(continuePause)

}